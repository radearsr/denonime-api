generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model animes {
  id                   Int                    @id @default(autoincrement())
  title                String?                @db.VarChar(100)
  rating               Float
  synopsis             String                 @db.Text
  poster               String                 @db.VarChar()
  anime_slug           String                 @db.VarChar(100)@unique()
  release_date         DateTime               @db.Date
  published            Boolean                @db.Boolean
  status               AnimeStatus            @default(COMPLETED)
  anime_type           AnimeType              @default(SERIES)
  last_episode_update  DateTime               @default(now()) @db.Timestamp(6)
  created_at           DateTime               @default(now())
  episodes             episodes[]
  episode_sources      episode_sources[]
  anime_detail_sources anime_detail_sources[]
  anime_genres         anime_genres[]
}

model episodes {
  id              Int               @id @default(autoincrement())
  episode_slug    String?           @db.VarChar(100)@unique()
  episode_type    EpisodeType?      @default(TV)
  number_episode  Int?
  url_source      String?           @db.VarChar(100)@unique()
  published       Boolean           @db.Boolean
  anime_id        Int
  created_at      DateTime          @default(now())
  anime           animes            @relation(fields: [anime_id], references: [id])
  episode_sources episode_sources[]
}

model episode_sources {
  id                Int                 @id @default(autoincrement())
  label             LabelEpisodeSources @default(DEFAULT)
  url_source        String?             @db.VarChar(100)@unique()
  scraping_strategy ScrapingStrategy    @default(CUSTOM)
  anime_id          Int
  episode_id        Int
  created_at        DateTime            @default(now())
  anime             animes              @relation(fields: [anime_id], references: [id])
  episode           episodes            @relation(fields: [episode_id], references: [id])
}

model anime_detail_sources {
  id                Int              @id @default(autoincrement())
  url_source        String?          @db.VarChar(100)@unique()
  scraping_strategy ScrapingStrategy @default(CUSTOM)
  anime_id          Int
  monitoring        Boolean          @db.Boolean @default(true)
  created_at        DateTime         @default(now())
  anime             animes           @relation(fields: [anime_id], references: [id])
}

model genres {
  id           Int            @id @default(autoincrement())
  genre_slug   String?        @db.VarChar(50)
  name         String?        @db.VarChar(50)
  anime_genres anime_genres[]
}

model anime_genres {
  id       Int    @id @default(autoincrement())
  anime_id Int
  genre_id Int
  anime    animes @relation(fields: [anime_id], references: [id])
  genre    genres @relation(fields: [genre_id], references: [id])
}

enum AnimeStatus {
  ONGOING
  COMPLETED
}

enum AnimeType {
  MOVIES
  SERIES
}

enum EpisodeType {
  TV
  MV
  OVA
}

enum ScrapingStrategy {
  ANIMEINDO
  OTAKUDESU
  CUSTOM
}

enum LabelEpisodeSources {
  HD
  DEFAULT
}
